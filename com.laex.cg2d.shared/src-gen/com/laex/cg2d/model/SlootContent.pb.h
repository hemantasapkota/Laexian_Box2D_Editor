// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/laex/cg2d/model/SlootContent.proto

#ifndef PROTOBUF_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto__INCLUDED
#define PROTOBUF_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace laex {
namespace cg2d {
namespace model {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();
void protobuf_AssignDesc_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();
void protobuf_ShutdownFile_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();

class SlootItem;
class SlootCollection;

// ===================================================================

class SlootItem : public ::google::protobuf::Message {
 public:
  SlootItem();
  virtual ~SlootItem();

  SlootItem(const SlootItem& from);

  inline SlootItem& operator=(const SlootItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlootItem& default_instance();

  void Swap(SlootItem* other);

  // implements Message ----------------------------------------------

  SlootItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlootItem& from);
  void MergeFrom(const SlootItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string imgUrl = 3;
  inline bool has_imgurl() const;
  inline void clear_imgurl();
  static const int kImgUrlFieldNumber = 3;
  inline const ::std::string& imgurl() const;
  inline void set_imgurl(const ::std::string& value);
  inline void set_imgurl(const char* value);
  inline void set_imgurl(const char* value, size_t size);
  inline ::std::string* mutable_imgurl();
  inline ::std::string* release_imgurl();
  inline void set_allocated_imgurl(::std::string* imgurl);

  // optional float price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline float price() const;
  inline void set_price(float value);

  // @@protoc_insertion_point(class_scope:com.laex.cg2d.model.SlootItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_imgurl();
  inline void clear_has_imgurl();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* title_;
  ::std::string* imgurl_;
  float price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();
  friend void protobuf_AssignDesc_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();
  friend void protobuf_ShutdownFile_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();

  void InitAsDefaultInstance();
  static SlootItem* default_instance_;
};
// -------------------------------------------------------------------

class SlootCollection : public ::google::protobuf::Message {
 public:
  SlootCollection();
  virtual ~SlootCollection();

  SlootCollection(const SlootCollection& from);

  inline SlootCollection& operator=(const SlootCollection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlootCollection& default_instance();

  void Swap(SlootCollection* other);

  // implements Message ----------------------------------------------

  SlootCollection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlootCollection& from);
  void MergeFrom(const SlootCollection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string developerId = 1;
  inline bool has_developerid() const;
  inline void clear_developerid();
  static const int kDeveloperIdFieldNumber = 1;
  inline const ::std::string& developerid() const;
  inline void set_developerid(const ::std::string& value);
  inline void set_developerid(const char* value);
  inline void set_developerid(const char* value, size_t size);
  inline ::std::string* mutable_developerid();
  inline ::std::string* release_developerid();
  inline void set_allocated_developerid(::std::string* developerid);

  // optional string collectionTitle = 2;
  inline bool has_collectiontitle() const;
  inline void clear_collectiontitle();
  static const int kCollectionTitleFieldNumber = 2;
  inline const ::std::string& collectiontitle() const;
  inline void set_collectiontitle(const ::std::string& value);
  inline void set_collectiontitle(const char* value);
  inline void set_collectiontitle(const char* value, size_t size);
  inline ::std::string* mutable_collectiontitle();
  inline ::std::string* release_collectiontitle();
  inline void set_allocated_collectiontitle(::std::string* collectiontitle);

  // repeated .com.laex.cg2d.model.SlootItem slootItems = 3;
  inline int slootitems_size() const;
  inline void clear_slootitems();
  static const int kSlootItemsFieldNumber = 3;
  inline const ::com::laex::cg2d::model::SlootItem& slootitems(int index) const;
  inline ::com::laex::cg2d::model::SlootItem* mutable_slootitems(int index);
  inline ::com::laex::cg2d::model::SlootItem* add_slootitems();
  inline const ::google::protobuf::RepeatedPtrField< ::com::laex::cg2d::model::SlootItem >&
      slootitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::laex::cg2d::model::SlootItem >*
      mutable_slootitems();

  // @@protoc_insertion_point(class_scope:com.laex.cg2d.model.SlootCollection)
 private:
  inline void set_has_developerid();
  inline void clear_has_developerid();
  inline void set_has_collectiontitle();
  inline void clear_has_collectiontitle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* developerid_;
  ::std::string* collectiontitle_;
  ::google::protobuf::RepeatedPtrField< ::com::laex::cg2d::model::SlootItem > slootitems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();
  friend void protobuf_AssignDesc_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();
  friend void protobuf_ShutdownFile_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto();

  void InitAsDefaultInstance();
  static SlootCollection* default_instance_;
};
// ===================================================================


// ===================================================================

// SlootItem

// optional string id = 1;
inline bool SlootItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlootItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlootItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlootItem::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SlootItem::id() const {
  return *id_;
}
inline void SlootItem::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SlootItem::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SlootItem::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlootItem::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SlootItem::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlootItem::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 2;
inline bool SlootItem::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlootItem::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlootItem::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlootItem::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SlootItem::title() const {
  return *title_;
}
inline void SlootItem::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SlootItem::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SlootItem::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlootItem::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* SlootItem::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlootItem::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imgUrl = 3;
inline bool SlootItem::has_imgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SlootItem::set_has_imgurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SlootItem::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SlootItem::clear_imgurl() {
  if (imgurl_ != &::google::protobuf::internal::kEmptyString) {
    imgurl_->clear();
  }
  clear_has_imgurl();
}
inline const ::std::string& SlootItem::imgurl() const {
  return *imgurl_;
}
inline void SlootItem::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  imgurl_->assign(value);
}
inline void SlootItem::set_imgurl(const char* value) {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  imgurl_->assign(value);
}
inline void SlootItem::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  imgurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlootItem::mutable_imgurl() {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  return imgurl_;
}
inline ::std::string* SlootItem::release_imgurl() {
  clear_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imgurl_;
    imgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlootItem::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imgurl_;
  }
  if (imgurl) {
    set_has_imgurl();
    imgurl_ = imgurl;
  } else {
    clear_has_imgurl();
    imgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float price = 4;
inline bool SlootItem::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SlootItem::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SlootItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SlootItem::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float SlootItem::price() const {
  return price_;
}
inline void SlootItem::set_price(float value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// SlootCollection

// optional string developerId = 1;
inline bool SlootCollection::has_developerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlootCollection::set_has_developerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlootCollection::clear_has_developerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlootCollection::clear_developerid() {
  if (developerid_ != &::google::protobuf::internal::kEmptyString) {
    developerid_->clear();
  }
  clear_has_developerid();
}
inline const ::std::string& SlootCollection::developerid() const {
  return *developerid_;
}
inline void SlootCollection::set_developerid(const ::std::string& value) {
  set_has_developerid();
  if (developerid_ == &::google::protobuf::internal::kEmptyString) {
    developerid_ = new ::std::string;
  }
  developerid_->assign(value);
}
inline void SlootCollection::set_developerid(const char* value) {
  set_has_developerid();
  if (developerid_ == &::google::protobuf::internal::kEmptyString) {
    developerid_ = new ::std::string;
  }
  developerid_->assign(value);
}
inline void SlootCollection::set_developerid(const char* value, size_t size) {
  set_has_developerid();
  if (developerid_ == &::google::protobuf::internal::kEmptyString) {
    developerid_ = new ::std::string;
  }
  developerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlootCollection::mutable_developerid() {
  set_has_developerid();
  if (developerid_ == &::google::protobuf::internal::kEmptyString) {
    developerid_ = new ::std::string;
  }
  return developerid_;
}
inline ::std::string* SlootCollection::release_developerid() {
  clear_has_developerid();
  if (developerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = developerid_;
    developerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlootCollection::set_allocated_developerid(::std::string* developerid) {
  if (developerid_ != &::google::protobuf::internal::kEmptyString) {
    delete developerid_;
  }
  if (developerid) {
    set_has_developerid();
    developerid_ = developerid;
  } else {
    clear_has_developerid();
    developerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string collectionTitle = 2;
inline bool SlootCollection::has_collectiontitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlootCollection::set_has_collectiontitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlootCollection::clear_has_collectiontitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlootCollection::clear_collectiontitle() {
  if (collectiontitle_ != &::google::protobuf::internal::kEmptyString) {
    collectiontitle_->clear();
  }
  clear_has_collectiontitle();
}
inline const ::std::string& SlootCollection::collectiontitle() const {
  return *collectiontitle_;
}
inline void SlootCollection::set_collectiontitle(const ::std::string& value) {
  set_has_collectiontitle();
  if (collectiontitle_ == &::google::protobuf::internal::kEmptyString) {
    collectiontitle_ = new ::std::string;
  }
  collectiontitle_->assign(value);
}
inline void SlootCollection::set_collectiontitle(const char* value) {
  set_has_collectiontitle();
  if (collectiontitle_ == &::google::protobuf::internal::kEmptyString) {
    collectiontitle_ = new ::std::string;
  }
  collectiontitle_->assign(value);
}
inline void SlootCollection::set_collectiontitle(const char* value, size_t size) {
  set_has_collectiontitle();
  if (collectiontitle_ == &::google::protobuf::internal::kEmptyString) {
    collectiontitle_ = new ::std::string;
  }
  collectiontitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlootCollection::mutable_collectiontitle() {
  set_has_collectiontitle();
  if (collectiontitle_ == &::google::protobuf::internal::kEmptyString) {
    collectiontitle_ = new ::std::string;
  }
  return collectiontitle_;
}
inline ::std::string* SlootCollection::release_collectiontitle() {
  clear_has_collectiontitle();
  if (collectiontitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collectiontitle_;
    collectiontitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlootCollection::set_allocated_collectiontitle(::std::string* collectiontitle) {
  if (collectiontitle_ != &::google::protobuf::internal::kEmptyString) {
    delete collectiontitle_;
  }
  if (collectiontitle) {
    set_has_collectiontitle();
    collectiontitle_ = collectiontitle;
  } else {
    clear_has_collectiontitle();
    collectiontitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.laex.cg2d.model.SlootItem slootItems = 3;
inline int SlootCollection::slootitems_size() const {
  return slootitems_.size();
}
inline void SlootCollection::clear_slootitems() {
  slootitems_.Clear();
}
inline const ::com::laex::cg2d::model::SlootItem& SlootCollection::slootitems(int index) const {
  return slootitems_.Get(index);
}
inline ::com::laex::cg2d::model::SlootItem* SlootCollection::mutable_slootitems(int index) {
  return slootitems_.Mutable(index);
}
inline ::com::laex::cg2d::model::SlootItem* SlootCollection::add_slootitems() {
  return slootitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::laex::cg2d::model::SlootItem >&
SlootCollection::slootitems() const {
  return slootitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::laex::cg2d::model::SlootItem >*
SlootCollection::mutable_slootitems() {
  return &slootitems_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace cg2d
}  // namespace laex
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_com_2flaex_2fcg2d_2fmodel_2fSlootContent_2eproto__INCLUDED
