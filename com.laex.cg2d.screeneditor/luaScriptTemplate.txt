ptm = 16 --default
cardNoX = 0
cardNoY = 0
cardWidth = 0
maxXVelocity = 10
onAir = false

screenModel = nil
queryMgr = nil

destroyBodyList = {}

function init(_screenModel, _queryMgr, world, cam)
	screenModel = _screenModel
	queryMgr = _queryMgr
	
	ptm = _screenModel:getScreenPrefs():getWorldPrefs():getPtmRatio()
	cardNoX = _screenModel:getScreenPrefs():getCardPrefs():getCardNoX()
	cardNoY = _screenModel:getScreenPrefs():getCardPrefs():getCardNoY()
	cardWidth = _screenModel:getScreenPrefs():getCardPrefs():getCardWidth()
end

function initBody(world, cam, body, id)
end

function update(world, cam, body, id)

	if id == "runner" then
		local posX = body:getTransform():getPosition().x

		local leftBoundsCondition = posX > (cardWidth/ptm/2)
		local rightBoundsCondition = posX < ((cardNoX - 0.5) * cardWidth) / ptm

		if leftBoundsCondition and rightBoundsCondition then
			cam.position.x = posX
		end

	end

	--destroy any bodies to be destroyed
	if id == destroyBodyList[0] then
		world:destroyBody(body)
	end
end

function keyPressed(world, cam, key)
	local body = queryMgr:getEntityById("runner")

    if key == "LEFT" then   
    	
    	if onAir then
    		return
    	end

		if body:getLinearVelocity().x <= maxXVelocity then
			body:applyLinearImpulse(-1, 0, 0.5, 0)
    	end
    end

	if key == "RIGHT" then

		if onAir then
			return	
		end

		if body:getLinearVelocity().x <= maxXVelocity then
			body:applyLinearImpulse(0.8, 0, 0, 0)
		end
	end

	if key == "SPACE" then
		if not onAir then
			local velo = luajava.newInstance("com.badlogic.gdx.math.Vector2")
			velo.y = 9
			velo.x = body:getLinearVelocity().x
		
			body:setLinearVelocity(velo)
			onAir = true
		end
	end

end

function collisionCallback(idA, idB, bodyA, bodyB, world, cam) 

	if string.match(idA, "edge") and idB == "runner" then
		onAir = false
	end

	if idA == "runner" and string.match(idB, "coin") then
		destroyBodyList[0] = idB
	end

	if idA == "runner" and string.match(idB, "jumpBase") then
        bodyA:applyLinearImpulse(0, 20, 0, 0)
	end

end
